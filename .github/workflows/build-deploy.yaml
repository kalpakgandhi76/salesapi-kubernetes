name: Build and deploy an app to AKS

on:
  push:
    branches:
    - main
    paths-ignore:
    - '**/*.md'
    - '**/*.gitignore'
    - '**/*.gitattributes'

env:
  AZURE_CONTAINER_REGISTRY: "anycompanyacr"
  CONTAINER_NAME: "salesapi"
  RESOURCE_GROUP: "anycompany-infra-group"
  CLUSTER_NAME: "anycompany-np-workload"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: [ ubuntu-latest, arm64 ]
    outputs:
      image-name: ${{ steps.define_image.outputs.image_name }}
    steps:
    # Checks out the repository this file is in
    - uses: actions/checkout@v4

    # Logs in with your Azure credentials    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Azure service principal credentials
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL

    # Builds and pushes an image up to your Azure Container Registry
    #- name: Build and push image to ACR
    #  run: |
    #    az acr build --image ${{ env.CONTAINER_NAME }}:${{ github.sha }} --platform linux/arm64 --registry ${{ env.AZURE_CONTAINER_REGISTRY }}  .   

    - name: Build and push Docker image to ACR
      run: |
        az acr login -n ${env.AZURE_CONTAINER_REGISTRY}

        # Build the Docker image
        docker build -t ${env.AZURE_CONTAINER_REGISTRY}.azurecr.io/${env.CONTAINER_NAME}:${github.sha} .

        # Push the Docker image to ACR
        docker push ${env.AZURE_CONTAINER_REGISTRY}.azurecr.io/${env.CONTAINER_NAME}:${github.sha}  

    - name: Define image name
      id: define_image
      run: |
        IMAGE_NAME="${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}"
        echo "::set-output name=image_name::$IMAGE_NAME"  # Set the output value for image-name
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV  # Export image name to environment (optional, for use within this job)

  deploy:
    needs: buildImage
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Checks out the repository this file is in
    - uses: actions/checkout@v4

    # Logs in with your Azure credentials
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Azure service principal credentials
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL

    # Use kubelogin to configure your kubeconfig for Azure auth
    #- name: Set up kubelogin for non-interactive login
    #  uses: azure/use-kubelogin@v1
    #  with:
    #    kubelogin-version: 'v0.0.25'

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        admin: 'true'
        #use-kubelogin: 'true'    

    - name: Get image name from build job output
      run: |
        IMAGE_NAME="${{ needs.buildImage.outputs.image-name }}"
        echo "Using image: $IMAGE_NAME" 
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV  # Export image name to environment (optional, for use within this job)

    #- name: Define image name
    #  id: define_image
    #  run: |
    #    IMAGE_NAME="${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:{{ github.sha }}"
    #    echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV  # Export image name as an environment variable

    - name: Update namespace in namespace-dev.yaml and apply
      run: |
        # Apply the NameSpace
        kubectl apply -f k8/namespace-dev.yaml

    - name: Update service in loadbalancer.yaml and apply
      run: |
        # Apply the Load Balancer Service
        kubectl apply -f k8/loadbalancer.yaml

    - name: Update image in deployment.yaml and apply
      run: |
        # Update image in deployment.yaml
        sed -i "s#{{IMAGE_NAME}}#${IMAGE_NAME}#g" k8/deployment.yaml
        # Apply the deployment
        kubectl apply -f k8/deployment.yaml
